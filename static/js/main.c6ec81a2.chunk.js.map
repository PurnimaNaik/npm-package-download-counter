{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","App","onSubmit","bind","state","packageNameInState","startDate","Date","endDate","responseInState","errorMessageInState","request","XMLHttpRequest","formatedStartDate","this","formatDate","formatedEndDate","open","onload","data","JSON","parse","response","readyState","status","oncallback","onNoResultCallback","send","console","log","setState","error","e","retrieveCount","date","d","month","getMonth","day","getDate","year","getFullYear","length","join","className","type","placeholder","onChange","evt","target","value","selectsStart","selected","setStartDate","maxDate","isClearable","selectsEnd","setEndDate","minDate","onClick","variant","disabled","downloads","React","Component","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6ec81a2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { render } from 'react-dom';\n// import style from '../styles/index.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      packageNameInState: '',\n      startDate: new Date(),\n      endDate: new Date(),\n      responseInState: '',\n      errorMessageInState:'',\n    };\n  }\n  componentDidMount() {\n    // this.retrieveCount();\n  }\n\n  retrieveCount() {\n    var request = new XMLHttpRequest();\n    // https://api.npmjs.org/downloads/point/2019-06-01:2019-09-30/two-part-progress-circle\n\n    var formatedStartDate = this.formatDate(this.state.startDate);\n    var formatedEndDate = this.formatDate(this.state.endDate);\n\n    request.open(\n      'GET',\n      'https://api.npmjs.org/downloads/point/' +\n        formatedStartDate +\n        ':' +\n        formatedEndDate +\n        '/' +\n        this.state.packageNameInState,\n      true\n    );\n    request.onload = function() {\n      var data = JSON.parse(request.response);\n\n      if (request.readyState == 4 && request.status == 200) {\n        this.oncallback(data);\n      } else if (request.status != 200) {\n        this.onNoResultCallback(data);\n      }\n    }.bind(this);\n    request.send();\n  }\n\n  oncallback(response) {\n    console.log('response');\n    console.log(response);\n    this.setState({\n      responseInState: response,\n    });\n  }\n\n  onNoResultCallback(response) {\n    console.log('onNoResultCallback');\n    console.log(response);\n    this.setState({\n      errorMessageInState: response.error,\n    });\n  }\n\n  onSubmit(e) {\n    // this.setState({\n      // errorMessageInState:'',\n      // responseInState:'',\n      // packageNameInState: '',\n      // startDate: new Date(),\n      // endDate: new Date(),\n    // },()=>{\n    //   this.retrieveCount();\n    // });\n    this.retrieveCount();\n  }\n\n  formatDate(date) {\n    var d = new Date(date),\n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n  }\n\n  setStartDate(date) {\n    this.setState({\n      startDate: date,\n    });\n  }\n\n  setEndDate(date) {\n    this.setState({\n      endDate: date,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"mainContainer\">\n        <div className=\"contentContainer\">\n          <p className=\"heading\"> Check NPM Package Downloads</p>\n          <form className=\"npm-count-form\">\n            <input\n              type=\"text\"\n              className=\"input\"\n              placeholder=\"Enter package name\"\n              onChange={evt => {\n                this.setState({ packageNameInState: evt.target.value,errorMessageInState:'',\n                responseInState:'', });\n              }}\n            />\n            <p className=\"dateRangeInstruction\">Select date range</p>\n            <div className=\"datePickerContainer\">\n              <>\n                <DatePicker\n                  className=\"firstDatePicker\"\n                  selectsStart\n                  selected={this.state.startDate}\n                  onChange={this.setStartDate.bind(this)}\n                  startDate={this.state.startDate}\n                  endDate={this.state.endDate}\n                  maxDate={new Date()}\n                  isClearable\n                />\n\n                <DatePicker\n                  selectsEnd\n                  selected={this.state.endDate}\n                  onChange={this.setEndDate.bind(this)}\n                  endDate={this.state.endDate}\n                  startDate={this.state.startDate}\n                  minDate={this.state.startDate}\n                  maxDate={new Date()}\n                  isClearable\n                />\n              </>\n            </div>\n          </form>\n\n          <div className=\"buttonContainer\">\n            <button\n              className=\"button\"\n              onClick={this.onSubmit}\n              variant=\"success\"\n              disabled={this.state.packageNameInState == ''}\n              // disabled={false}\n            >\n              Get Count\n            </button>\n          </div>\n{this.state.errorMessageInState!='' ?(\n  <p className=\"error\">Error : {this.state.errorMessageInState}.</p>\n):null}\n\n\n          {this.state.responseInState && this.state.errorMessageInState=='' && this.state.packageNameInState ? (\n            <div className=\"resultsContainer\">\n              {/* <p>Results</p> */}\n\n              {/* <p className=\"instruction\">\n              {this.state.responseInState.package} was downloaded\n            </p> */}\n              <p className=\"downloadCount\">\n                {this.state.responseInState.downloads}\n              </p>\n              <p className=\"instruction\">downloads</p>\n\n              {/* <p className=\"instruction\">\n              times from {this.state.startDate.toLocaleDateString()} to{' '}\n              {this.state.endDate.toLocaleDateString()}\n            </p> */}\n            </div>\n          ) : null}\n        </div>\n        <div className=\"disclaimerContainer\">\n          <p className=\"APIDisclaimer\">\n            * Website uses NPM's API to pull download count.\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nrender(<App />, window.document.getElementById('root'));\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}